/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;
import static Sales.Income_admin.isValidFormat;
import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Eryl
 */
public class Inventory_admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin_invetory
     */
    public Inventory_admin() {
        initComponents();
        jTable1.setAutoCreateRowSorter(true);
        jPanel1.setBackground(new Color(0,0,0,200));
        jPanel2.setBackground(new Color(0,0,0,200));
        updatecombo();
    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pcodetxt = new javax.swing.JTextField();
        pnametxt = new javax.swing.JTextField();
        pricetxt = new javax.swing.JTextField();
        stocktxt = new javax.swing.JTextField();
        expdatetxt = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pcodetxt2 = new javax.swing.JTextField();
        addtxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        Add = new javax.swing.JButton();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        jButton1.setText("Refresh Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 450, -1, 47));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        jButton2.setText("Clear all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 510, 130, 45));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 30, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Product Code");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Product Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Price");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Stock");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Expiration Date");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, -1, -1));

        pcodetxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(pcodetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 80, 183, -1));

        pnametxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(pnametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 183, -1));

        pricetxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(pricetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 183, -1));

        stocktxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(stocktxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 210, 183, -1));

        expdatetxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(expdatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 260, 183, -1));

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Product Code", "Product Name", "Price", "Stock", "Expiration", "Type" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 340, 175, 48));

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 170, 50));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setText("Filter:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, -1, -1));

        search.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        search.setForeground(new java.awt.Color(153, 153, 153));
        search.setText("Search Name");
        search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFocusGained(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 150, 170, 50));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Sort Table by:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 151, 27));

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        jButton6.setText("Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 145, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Product Code:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Add Stock:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 130, -1, -1));

        pcodetxt2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        pcodetxt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcodetxt2ActionPerformed(evt);
            }
        });
        getContentPane().add(pcodetxt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 80, 140, -1));

        addtxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(addtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 130, 140, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, -1, -1));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, -1, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Type");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, -1, -1));

        type.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Beverage", "Health", "Sanitary", "Miscellaneous" }));
        jPanel1.add(type, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 282, 180, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 450, 390));

        Add.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(132, Short.MAX_VALUE)
                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 60, 320, 200));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/INVENTORY ADMIN new.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1490, 630));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private static Pattern DATE_PATTERN = Pattern.compile("^\\d{4}-\\d{2}-\\d{2}$");
    public static boolean isValidFormat(String dateStr)
    {
        if (DATE_PATTERN.matcher(dateStr).matches())
        {
            return true;
        }
        return false;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void updatecombo(){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            pst = con.prepareStatement("SELECT distinct type from product");
            rs = pst.executeQuery();
            while(rs.next()){
                jComboBox2.addItem(rs.getString("type"));
            }
        }catch (ClassNotFoundException ex){
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex){
             Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTable1.setModel(new DefaultTableModel());
        pcodetxt2.setText("");
        addtxt.setText("");
        pcodetxt.setText("");
        pnametxt.setText("");
        pricetxt.setText("");
        stocktxt.setText("");
        expdatetxt.setText("");
        search.setText("Search Name");
        search.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        boolean isnumeric = true, isnumeric2 = true, isnumeric3 =true;
        isnumeric = pricetxt.getText().matches("-?\\d+(\\.\\d+)?");
        isnumeric2 = stocktxt.getText().matches("-?\\d+(\\.\\d+)?");
        boolean isvaliddate = isValidFormat(expdatetxt.getText());
        if(isnumeric && isnumeric2 && isvaliddate)
        {
            float priceposi = Float.parseFloat(pricetxt.getText());
            float stockposi = Float.parseFloat(stocktxt.getText());
        if(priceposi>0 && stockposi>0)
        {
        String sql = "INSERT INTO product"
                +"(id, prodname, price, Stock, expdate, type)"
                +"VALUES (?,?,?,?,?,?)";
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos", "root", "");
            pst = con.prepareStatement(sql);
            pst.setString(1, pcodetxt.getText());
            pst.setString(2, pnametxt.getText());
            pst.setString(3, pricetxt.getText());
            pst.setString(4, stocktxt.getText());
            pst.setString(5, expdatetxt.getText());
            pst.setString(6, type.getSelectedItem().toString());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Save Successfull!");
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex + "\nProduct code must not be duplicated.\nPlease check your input.\nPlease follow the correct date format(yyyy-mm-dd).\nPrice and Stock must only contain digits.");
        }
        }else
        {
            JOptionPane.showMessageDialog(null, "Stock and price must be positve.");
        }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please check your input.\nPlease follow the correct date format(yyyy-mm-dd).\nPrice and Stock must only contain digits.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String sql = "DELETE FROM product WHERE id = ?";
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos", "root", "");
            pst = con.prepareStatement(sql);
            pst.setString(1, pcodetxt.getText());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Delete Successfull!");
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boolean isnumeric = true, isnumeric2 = true, isnumeric3 =true;
        isnumeric = pricetxt.getText().matches("-?\\d+(\\.\\d+)?");
        isnumeric2 = stocktxt.getText().matches("-?\\d+(\\.\\d+)?");
        boolean isvaliddate = isValidFormat(expdatetxt.getText());
        if(isnumeric && isnumeric2 && isvaliddate)
        {
            float priceposi = Float.parseFloat(pricetxt.getText());
            float stockposi = Float.parseFloat(stocktxt.getText());
        if(priceposi>0 && stockposi>0)
        {
        String sql = "UPDATE product SET prodname=?,price=?,Stock=?,expdate=?,type=? WHERE id=?";
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos", "root", "");
            pst = con.prepareStatement(sql);
            pst.setString(6, pcodetxt.getText());
            pst.setString(1, pnametxt.getText());
            pst.setString(2, pricetxt.getText());
            pst.setString(3, stocktxt.getText());
            pst.setString(4, expdatetxt.getText());
            pst.setString(5, type.getSelectedItem().toString());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Update Successfull!");
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        }else{
            JOptionPane.showMessageDialog(null, "Stock and price must be positve.");
        }
        }else{
            JOptionPane.showMessageDialog(null, "Please check your input.\nPlease follow the correct date format.\nPrice and Stock must only contain digits.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String select = jComboBox1.getSelectedItem().toString();
        if(select.equals("Price"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by price";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Stock"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by Stock";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Product Name"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by prodname";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Expiration"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by expdate";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else if(select.equals("Product Code"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by id";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if (select.equals("Type"))
        {
            jTable1.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by type";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        new Pos_admin().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        
        pcodetxt.setText(model.getValueAt(selectedRowIndex, 0).toString());
        pnametxt.setText(model.getValueAt(selectedRowIndex, 1).toString());
        pricetxt.setText(model.getValueAt(selectedRowIndex, 2).toString());
        stocktxt.setText(model.getValueAt(selectedRowIndex, 3).toString());
        expdatetxt.setText(model.getValueAt(selectedRowIndex, 4).toString());
        pcodetxt2.setText(model.getValueAt(selectedRowIndex, 0).toString());
        type.setSelectedItem(model.getValueAt(selectedRowIndex, 5));
    }//GEN-LAST:event_jTable1MouseClicked

    private void pcodetxt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcodetxt2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcodetxt2ActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        boolean isnumeric = true;
        isnumeric = addtxt.getText().matches("-?\\d+?");
        String code = pcodetxt2.getText();
        if(isnumeric)
        {
            int addposi = Integer.parseInt(addtxt.getText());
        if(addposi>0)
        {
        String sql = "UPDATE product SET Stock=Stock+'"+addposi+"' WHERE id='"+code+"'";
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos", "root", "");
            pst = con.prepareStatement(sql);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Add Successfull!");
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        }else{
            JOptionPane.showMessageDialog(null, "Only positive number is accepted when adding.");
        }
        }else{
            JOptionPane.showMessageDialog(null, "Please check your input. Input must be in digits and is a whole number.");
        }
    }//GEN-LAST:event_AddActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String select = jComboBox2.getSelectedItem().toString();
        jTable1.setModel(new DefaultTableModel());
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            pst = con.prepareStatement("SELECT * from product where type='"+select+"'");
            rs = pst.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            pst.close();
            con.close();
        }catch (ClassNotFoundException ex){
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex){
             Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusGained
        // TODO add your handling code here:
        if(search.getText().equals("Search Name")){
            search.setText("");
            search.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_searchFocusGained

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        // TODO add your handling code here:
        jTable1.setModel(new DefaultTableModel());
        String searching = search.getText();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            String sql = "SELECT * from product where prodname like ?";
            pst = con.prepareStatement(sql);
            pst.setString(1, "%" + searching + "%");
            rs = pst.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            rs.close();
            pst.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory_admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JTextField addtxt;
    private javax.swing.JLabel bg;
    private javax.swing.JTextField expdatetxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField pcodetxt;
    private javax.swing.JTextField pcodetxt2;
    private javax.swing.JTextField pnametxt;
    private javax.swing.JTextField pricetxt;
    private javax.swing.JTextField search;
    private javax.swing.JTextField stocktxt;
    private javax.swing.JComboBox<String> type;
    // End of variables declaration//GEN-END:variables
}
