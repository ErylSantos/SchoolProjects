/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;

import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Eryl
 */
public class Inventory_staff extends javax.swing.JFrame {

    /**
     * Creates new form Inventory_staff
     */
    DefaultTableModel dm;
    
    public Inventory_staff() {
        initComponents();
        jTable2.setAutoCreateRowSorter(true);
        jPanel1.setBackground(new Color(0,0,0,200));
        jPanel2.setBackground(new Color(0,0,0,200));
        updatecombo();
    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pcodetxt2 = new javax.swing.JTextField();
        addtxt = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        search = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        bg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        jButton1.setText("Refresh Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 350, 148, 47));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, -1, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/back.png"))); // NOI18N
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 440, 150, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sort by:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, -1, -1));

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Product Code", "Product Name", "Price", "Stock", "Expiration", "Type" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 280, 170, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Inventory");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, -1, -1));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 140, 50));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Product Code:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Add Stock:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 190, -1, -1));

        pcodetxt2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(pcodetxt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 130, -1));

        addtxt.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(addtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 130, -1));

        add.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        getContentPane().add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 110, 50));

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filter" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 190, 170, 40));

        search.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        search.setForeground(new java.awt.Color(153, 153, 153));
        search.setText("Search Name");
        search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFocusGained(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 130, 170, 40));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        jButton2.setText("Clear all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 110, 45));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 300, 260));

        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/INCOME STAFF new.png"))); // NOI18N
        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1040, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void updatecombo(){
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            pst = con.prepareStatement("SELECT distinct type from product");
            rs = pst.executeQuery();
            while(rs.next()){
                jComboBox2.addItem(rs.getString("type"));
            }
        }catch (ClassNotFoundException ex){
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex){
             Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)
            
                colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            
            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:       
        jTable2.setModel(new DefaultTableModel());
        pcodetxt2.setText("");
        addtxt.setText("");
        search.setText("Search Name");
        search.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        new Pos_staff().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String select = jComboBox1.getSelectedItem().toString();
        if(select.equals("Price"))
        {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by price";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Stock"))
        {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by Stock";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Product Name"))
        {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by prodname";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Expiration"))
        {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by expdate";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        else if(select.equals("Product Code"))
        {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by id";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else if(select.equals("Type"))
            {
            jTable2.setModel(new DefaultTableModel());
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            Statement st = con.createStatement();
            String query = "select * from product order by type";
            rs = st.executeQuery(query);
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            st.close();
            con.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Login_staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        boolean isnumeric = true;
        isnumeric = addtxt.getText().matches("-?\\d+?");
        String code = pcodetxt2.getText();
        if(isnumeric)
        {
            int addposi = Integer.parseInt(addtxt.getText());
        if(addposi>0)
        {
        String sql = "UPDATE product SET Stock=Stock+'"+addposi+"' WHERE id='"+code+"'";
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos", "root", "");
            pst = con.prepareStatement(sql);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Add Successfull!");
        } catch (SQLException | HeadlessException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        }else{
            JOptionPane.showMessageDialog(null, "Only positive number is accepted when adding.");
        }
        }else{
            JOptionPane.showMessageDialog(null, "Please check your input. Input must be in digits and is a whole number.");
        }
    }//GEN-LAST:event_addActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        int selectedRowIndex = jTable2.getSelectedRow();  
        pcodetxt2.setText(model.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_jTable2MouseClicked

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String select = jComboBox2.getSelectedItem().toString();
        jTable2.setModel(new DefaultTableModel());
        try{
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            pst = con.prepareStatement("SELECT * from product where type='"+select+"'");
            rs = pst.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            pst.close();
            con.close();
        }catch (ClassNotFoundException ex){
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex){
             Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void searchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFocusGained
        // TODO add your handling code here:
         if(search.getText().equals("Search Name")){
            search.setText("");
            search.setForeground(new Color(0,0,0));
        }
    }//GEN-LAST:event_searchFocusGained

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        // TODO add your handling code here:
        jTable2.setModel(new DefaultTableModel());
        String searching = search.getText();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/salespos","root","");
            String sql = "SELECT * from product where prodname like ?";
            pst = con.prepareStatement(sql);
            pst.setString(1, "%" + searching + "%");
            rs = pst.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

            int cols = rsmd.getColumnCount();
            String[] colName = new String[cols];
            for(int i = 0; i<cols; i++)

            colName[i] = rsmd.getColumnName(i+1);
            model.setColumnIdentifiers(colName);
            

            String id, name, price, stock, expdate, type;
            while(rs.next())
            {
                id = rs.getString(1);
                name = rs.getString(2);
                price = rs.getString(3);
                stock = rs.getString(4);
                expdate = rs.getString(5);
                type = rs.getString(6);
                String[] row = {id, name, price, stock, expdate, type};
                model.addRow(row);
            }
            rs.close();
            pst.close();
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Pos_admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory_staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory_staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory_staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory_staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory_staff().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField addtxt;
    private javax.swing.JLabel bg;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField pcodetxt2;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables
}
